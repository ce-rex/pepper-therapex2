<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="breathing" id="1" localization="8" tooltip="" x="138" y="68"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motion = ALProxy( "ALMotion" )
        self.running = False

    def onUnload(self):
        #put clean-up code here
        self.running = False

    def onInput_onStart(self):
        self.running = True
        start = time.time()
        fractionMaxSpeed = 0.02

        angles = [-0.22, 0.11]
        RArmAngles = [0.15, -0.1, -0.1, -0.3]
        LArmAngles = [-0.15, -0.1, 0.1, -0.3]
        RArmAngles = [i * 0.5 for i in RArmAngles]
        LArmAngles = [i * 0.5 for i in LArmAngles]
        angles = [i * 0.5 for i in angles]

        while self.running:
            # self.motion.setAngles(["HipPitch", "KneePitch"], angles, fractionMaxSpeed)
            self.motion.changeAngles(["RElbowRoll", "RShoulderPitch", "RShoulderRoll", "RHand"], RArmAngles,
                                     fractionMaxSpeed * 0.5)
            self.motion.changeAngles(["LElbowRoll", "LShoulderPitch", "LShoulderRoll", "LHand"], LArmAngles,
                                     fractionMaxSpeed * 0.5)
            self.motion.angleInterpolationWithSpeed(["HipPitch", "KneePitch"], angles, fractionMaxSpeed)
            time.sleep(2)
            if angles[0] < 0.0:
                angles = [0.0, 0.0]
            else:
                angles = [-0.18, 0.09]
                angles = [i * 0.8 for i in angles]
            RArmAngles = [x * -1.0 for x in RArmAngles]
            LArmAngles = [x * -1.0 for x in LArmAngles]

        #self.onStopped() #activate the output of the box
        self.running = False

    def onInput_onStop(self):
        self.running = False

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>