<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="141.421"><Box name="Text Edit" id="1" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="76" y="29"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Please sit still and breathe normally, while I am calibrating!")]]></content></script><pluginContent><text><![CDATA[Please sit still and breathe normally, while I am calibrating!]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Animated Say Text" id="2" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="332" y="29"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Box name="Run NetworkLoop" id="3" localization="0" tooltip="Manage a behavior.&#x0A;&#x0A;Will start the behavior given as input when onStart is stimulated.&#x0A;&#x0A;Will stop it when onStop is stimulated.&#x0A;&#x0A;Will exit on onStopped when no error happened during behavior startup or stopping.&#x0A;&#x0A;Will exit on onError if an error happened, transmitting a string describing the error.&#x0A;&#x0A;Most notably (but not exclusively), the box will fail if you try to start a behavior not present on the robot, or if you try to start a behavior that&apos;s already started.&#x0A;" x="776" y="36"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.behaviorName = str()
        self.bm = ALProxy("ALBehaviorManager")

    def onUnload(self):
        if len(self.behaviorName) > 0:
            self.bm.stopBehavior(self.behaviorName)

    def onInput_onStart(self, p):
        if len(self.behaviorName) > 0 and self.behaviorName != p:
            raise RuntimeError("this box is already running another behavior")

        try:
            self.behaviorName = p
            self.bm.runBehavior(self.behaviorName)
        finally:
            self.behaviorName = str()
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /></Box><Box name="Text Edit (1)" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="521" y="39"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("boot-config/animations/networkLoop")]]></content></script><pluginContent><text><![CDATA[boot-config/animations/networkLoop]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Text Edit (2)" id="5" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="397" y="318"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("data")]]></content></script><pluginContent><text><![CDATA[data]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="send_to_raspi" id="7" localization="8" tooltip="" x="680" y="320"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def _init_(self):
        GeneratedClass._init_(self)

    def onLoad(self):
        import socket
        self.ip = "raspberrypi.local" # change to IP to the raspberry or to the pc with slideshow.py
        self.port = 5005
        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sock.sendto("pepper_online", (self.ip, self.port))
        except:
            print("connection to raspi not available")
        self.counter = 0

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, msg):
        #file = file + ".wav"
        print(msg)
        #self.sock.sendto("next_slide", (UDP_IP, UDP_PORT))
        try:
            #self.sock.sendto(msg, (self.ip, self.port))

            # Read server's response
            #response = self.sock.recv(1024)
            response = '[1, 2]'
            print(response)
            self.data_callback(response)
        except:
            print("connection to raspi not available")
        #self.onNext() #activate next output of the box
        self.onInput_onStop()

    def onInput_onStop(self):
        #self.counter = 0
        #self.sock.sendto("restart_wav_loop", (self.ip, self.port))
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def data_callback(self, response):
        self.onData(response)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onData" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="MoveToStandPosition" id="29" localization="8" tooltip="" x="1021" y="156"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="49"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model=""><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="49" value="-0.102526" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0"><Key frame="49" value="0.463981" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="49" value="-2.75837" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="49" value="0.339197" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="49" value="-0.587964" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="49" value="-29.7582" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="49" value="-70.2911" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="49" value="0.607435" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="49" value="89.6411" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="49" value="8.62054" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="49" value="0.3211" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="49" value="29.7585" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="49" value="70.1394" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="49" value="0.604563" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="49" value="89.6436" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="49" value="-8.54752" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="49" value="-0.24647" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Run SuccesBev" id="6" localization="0" tooltip="Manage a behavior.&#x0A;&#x0A;Will start the behavior given as input when onStart is stimulated.&#x0A;&#x0A;Will stop it when onStop is stimulated.&#x0A;&#x0A;Will exit on onStopped when no error happened during behavior startup or stopping.&#x0A;&#x0A;Will exit on onError if an error happened, transmitting a string describing the error.&#x0A;&#x0A;Most notably (but not exclusively), the box will fail if you try to start a behavior not present on the robot, or if you try to start a behavior that&apos;s already started.&#x0A;" x="759" y="156"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.behaviorName = str()
        self.bm = ALProxy("ALBehaviorManager")

    def onUnload(self):
        if len(self.behaviorName) > 0:
            self.bm.stopBehavior(self.behaviorName)

    def onInput_onStart(self, p):
        if len(self.behaviorName) > 0 and self.behaviorName != p:
            raise RuntimeError("this box is already running another behavior")

        try:
            self.behaviorName = p
            self.bm.runBehavior(self.behaviorName)
        finally:
            self.behaviorName = str()
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /></Box><Box name="Text Edit (3)" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="504" y="159"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("boot-config/animations/success")]]></content></script><pluginContent><text><![CDATA[boot-config/animations/success]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Start Calibration Raspi" id="11" localization="8" tooltip="" x="106" y="188"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def _init_(self):
        GeneratedClass._init_(self)

    def onLoad(self):
        import socket
        self.ip = "raspberrypi.local" # change to IP to the raspberry or to the pc with slideshow.py
        self.port = 5005
        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sock.sendto("pepper_online", (self.ip, self.port))
        except:
            print("connection to raspi not available")
        self.counter = 0

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        try:
            self.sock.sendto("calibration", (self.ip, self.port))
            response = self.sock.recv(1024)
            print(response.decode())
        except:
            print("connection to raspi not available")
        self.onInput_onStop()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="get data RasPi" id="9" localization="8" tooltip="" x="73" y="296"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def _init_(self):
        GeneratedClass._init_(self)

    def onLoad(self):
        import socket
        self.ip = "raspberrypi.local" # change to IP to the raspberry or to the pc with slideshow.py
        self.port = 5005
        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sock.sendto("pepper_online", (self.ip, self.port))
        except:
            print("connection to raspi not available")
        self.counter = 0

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        try:
            # self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sock.sendto("start", (self.ip, self.port))
            response = self.sock.recv(1024).decode()
            print(response)
            self.request_available = True
        except:
            print("connection to raspi not available")
        self.counter = 0
        #file = file + ".wav"
        #self.sock.sendto("data", (UDP_IP, UDP_PORT))
        #try:
        #    self.sock.sendto("data", (self.ip, self.port))
        #    print("hi")
        #    # Read server's response
        #    response = self.sock.recv(1024)
        #    #response = '[1, 2]'
        #    print("hi1")
        #    print(response.decode())
        #    self.data_callback(response)
        #    print("hi2")
        #except:
        #    print("connection to raspi not available")
        #self.onNext() #activate next output of the box
        print("yoooo")
        #self.onInput_onStop()

    def onInput_onStop(self):
        self.request_available = False
        #self.counter = 0
        #self.sock.sendto("restart_wav_loop", (self.ip, self.port))
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_onDataRequest(self):
        if self.request_available:
            try:
                self.sock.sendto("data", (self.ip, self.port))

                # Read server's response
                response = self.sock.recv(1024).decode()
                print(response)

                # data output
                self.onData(response)
            except:
                print("connection to raspi not available")
        else:
            self.onUnload()

    def onInput_onExerciseRequest(self):
        try:
            self.sock.sendto("exercise", (self.ip, self.port))

            # Read server's response
            response = self.sock.recv(1024).decode()
            print(response)

            # data output
            self.onExerciseLevel(response)
        except:
            print("connection to raspi not available")]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onDataRequest" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="onExerciseRequest" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Output name="onData" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="onExerciseLevel" type="2" type_size="1" nature="2" inner="0" tooltip="" id="8" /><Output name="onCalibrated" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" /></Box><Box name="Wait" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="240" y="300"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="Start Calibration Raspi (1)" id="12" localization="8" tooltip="" x="231" y="147"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def _init_(self):
        GeneratedClass._init_(self)

    def onLoad(self):
        import socket
        self.ip = "raspberrypi.local" # change to IP to the raspberry or to the pc with slideshow.py
        self.port = 5005
        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            # self.sock.sendto("pepper_online", (self.ip, self.port))
        except:
            print("connection to raspi not available")
        self.counter = 0

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        try:
            self.sock.sendto("calibration", (self.ip, self.port))
            response = self.sock.recv(1024)
            print(response.decode())
            print("hi1")
        except:
            print("connection to raspi not available")
        print("hi2")
        self.onInput_onStop()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Cute Eyes" id="13" localization="8" tooltip="" x="363" y="194"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Blink" id="3" localization="8" tooltip="This box makes the robot blink once." x="130" y="40"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB( "FaceLed0", 0x000000, rDuration )
        self.leds.post.fadeRGB( "FaceLed1", 0x000000, rDuration )
        self.leds.post.fadeRGB( "FaceLed2", 0xffffff, rDuration )
        self.leds.post.fadeRGB( "FaceLed3", 0x000000, rDuration )
        self.leds.post.fadeRGB( "FaceLed4", 0x000000, rDuration )
        self.leds.post.fadeRGB( "FaceLed5", 0x000000, rDuration )
        self.leds.post.fadeRGB( "FaceLed6", 0xffffff, rDuration )
        self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration )
        time.sleep( 0.1 )
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration )
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Blink (1)" id="1" localization="8" tooltip="This box makes the robot blink once." x="442" y="52"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB( "FaceLed0", 0x000000, rDuration )
        self.leds.post.fadeRGB( "FaceLed1", 0x000000, rDuration )
        self.leds.post.fadeRGB( "FaceLed2", 0xffffff, rDuration )
        self.leds.post.fadeRGB( "FaceLed3", 0x000000, rDuration )
        self.leds.post.fadeRGB( "FaceLed4", 0x000000, rDuration )
        self.leds.post.fadeRGB( "FaceLed5", 0x000000, rDuration )
        self.leds.post.fadeRGB( "FaceLed6", 0xffffff, rDuration )
        self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration )
        time.sleep( 0.1 )
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration )
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Cute Eyes" id="2" localization="8" tooltip="This box makes the robot blink once." x="285" y="49"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("FaceLed6", "magenta", rDuration)
        self.leds.post.fadeRGB("FaceLed7", "magenta", rDuration)
        time.sleep(5)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="3" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Playlist 1" id="14" localization="8" tooltip="" x="336" y="460"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote
        self.playlist = ["/../songs/blindinglights.wav", "/../songs/feel_it_still.wav"]

    def onLoad(self):
        self.bIsRunning = False
        pass

    def onUnload(self):
        self.stopPlayer()
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        for song in self.playlist:
            song_path = self.behaviorAbsolutePath() + song
            try:
                id = self.player.playFile(song_path, 0.6, 0.0)
            except:
                pass

        self.stopPlayer()
        self.onStopped() # activate output of the box
        self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopPlayer(self):
        self.playerStop.stopAll()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Number Edit" id="16" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="54" y="525"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(0)]]></content></script><pluginContent><number>0</number></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" /><Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" /></Box><Box name="Exercise Session" id="15" localization="8" tooltip="" x="205" y="516"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onNextExercise" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Exercise" id="2" localization="8" tooltip="" x="150" y="19"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="59.4604"><Box name="Exercise Duration" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="638" y="297"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="30" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="ex1_zen" id="1" localization="8" tooltip="" x="889" y="82"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onDoExercise" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onDidExercise" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="zen" id="14" localization="8" tooltip="" x="197" y="289"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="262" size="262"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe262" index="262"><Diagram><Box name="Goto And Play (number)" id="1" localization="8" tooltip="Jump to the frame number set in parameters and start playing the parent timeline." x="80" y="27"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onGo(self):
        self.gotoAndPlayParent(self.getParameter("Frame number"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /><Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="1" value="-6.91425" /><Key frame="64" value="-16.4" /><Key frame="85" value="-22.9" /><Key frame="106" value="-11.4258" /><Key frame="108" value="-11.4258" /><Key frame="185" value="3.1" /><Key frame="259" value="-7.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="1" value="0.0904995" /><Key frame="106" value="0.263673" /><Key frame="108" value="0.263673" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="1" value="-9.68456" /><Key frame="106" value="-2.19727" /><Key frame="108" value="-2.19727" /><Key frame="177" value="-16.8" /><Key frame="259" value="-9.3" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="1" value="-0.280098" /><Key frame="106" value="-0.263673" /><Key frame="108" value="-0.263673" /><Key frame="177" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="1" value="6.06772" /><Key frame="106" value="-0.175782" /><Key frame="108" value="-0.175782" /><Key frame="177" value="5.8" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="1" value="-65.7468" /><Key frame="40" value="-61.1" /><Key frame="67" value="-31.1" /><Key frame="82" value="-20.1" /><Key frame="106" value="-1.8" /><Key frame="108" value="-1.8" /><Key frame="168" value="-0.5" /><Key frame="191" value="-25.7" /><Key frame="235" value="-66.3" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="1" value="-28.068" /><Key frame="40" value="-55.6" /><Key frame="67" value="-8.6" /><Key frame="82" value="-1.6" /><Key frame="106" value="-18.1" /><Key frame="108" value="-18.1" /><Key frame="168" value="-119.5" /><Key frame="191" value="-41.7" /><Key frame="235" value="-39.8" /><Key frame="261" value="-27.2" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="1" value="0.606446" /><Key frame="40" value="0.98" /><Key frame="106" value="0.945518" /><Key frame="108" value="0.945518" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="1" value="19.507" /><Key frame="40" value="-27" /><Key frame="67" value="-55" /><Key frame="82" value="-62" /><Key frame="106" value="-86.2" /><Key frame="108" value="-86.2" /><Key frame="168" value="69.5" /><Key frame="191" value="58.4" /><Key frame="235" value="58.4" /><Key frame="261" value="18.3" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="1" value="16.7421" /><Key frame="40" value="0.5" /><Key frame="82" value="0.5" /><Key frame="106" value="41.7" /><Key frame="108" value="41.7" /><Key frame="138" value="63.8" /><Key frame="168" value="39.9" /><Key frame="191" value="7.3" /><Key frame="235" value="14.3" /><Key frame="261" value="17" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="1" value="-46.8919" /><Key frame="40" value="-17" /><Key frame="82" value="-104.5" /><Key frame="106" value="9.1" /><Key frame="108" value="9.1" /><Key frame="168" value="-20.9" /><Key frame="235" value="-47" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0"><Key frame="1" value="65.7468" /><Key frame="40" value="61.1" /><Key frame="67" value="31.1" /><Key frame="82" value="20.1" /><Key frame="106" value="1.8" /><Key frame="108" value="1.8" /><Key frame="168" value="0.5" /><Key frame="191" value="25.7" /><Key frame="235" value="66.3" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0"><Key frame="1" value="28.068" /><Key frame="40" value="55.6" /><Key frame="67" value="8.6" /><Key frame="82" value="1.6" /><Key frame="106" value="18.1" /><Key frame="108" value="18.1" /><Key frame="168" value="119.5" /><Key frame="191" value="41.7" /><Key frame="235" value="39.8" /><Key frame="261" value="27.2" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="1" value="0.606381" /><Key frame="40" value="0.98" /><Key frame="106" value="0.942004" /><Key frame="108" value="0.942004" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="1" value="19.507" /><Key frame="40" value="-27" /><Key frame="67" value="-55" /><Key frame="82" value="-62" /><Key frame="106" value="-86.2" /><Key frame="108" value="-86.2" /><Key frame="168" value="69.5" /><Key frame="191" value="58.4" /><Key frame="235" value="58.4" /><Key frame="261" value="18.3" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="1" value="-16.7421" /><Key frame="40" value="-0.5" /><Key frame="82" value="-0.5" /><Key frame="106" value="-41.7" /><Key frame="108" value="-41.7" /><Key frame="138" value="-63.8" /><Key frame="168" value="-39.9" /><Key frame="191" value="-7.3" /><Key frame="235" value="-14.3" /><Key frame="261" value="-17" /></ActuatorCurve><ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0"><Key frame="1" value="46.8919" /><Key frame="40" value="17" /><Key frame="82" value="104.5" /><Key frame="106" value="-9.1" /><Key frame="108" value="-9.1" /><Key frame="168" value="20.9" /><Key frame="235" value="47" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="go_zen" id="21" localization="8" tooltip="" x="155" y="128"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="40" value="-6.91425" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="40" value="0.0904995" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="40" value="-9.68456" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="40" value="-0.280098" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="40" value="6.06772" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="40" value="-65.7468" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="40" value="-28.068" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="40" value="0.606446" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="40" value="19.507" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="40" value="16.7421" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="40" value="-46.8919" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0"><Key frame="40" value="65.7468" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0"><Key frame="40" value="28.068" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="40" value="0.606381" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="40" value="19.507" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="40" value="-16.7421" /></ActuatorCurve><ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0"><Key frame="40" value="46.8919" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="441" y="9"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="187" y="10"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("bring your hands to your chest, slowly move upwards and make a big circle with your arms")]]></content></script><pluginContent><text><![CDATA[bring your hands to your chest, slowly move upwards and make a big circle with your arms]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Link inputowner="14" indexofinput="2" outputowner="21" indexofoutput="4" /><Link inputowner="21" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="14" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ex" id="2" localization="8" tooltip="" x="80" y="880"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onDoExercise" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onDidExercise" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="MoveToStandPosition" id="29" localization="8" tooltip="" x="1286" y="595"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="49"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model=""><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="49" value="-0.102526" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0"><Key frame="49" value="0.463981" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="49" value="-2.75837" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="49" value="0.339197" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="49" value="-0.587964" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="49" value="-29.7582" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="49" value="-70.2911" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="49" value="0.607435" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="49" value="89.6411" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="49" value="8.62054" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="49" value="0.3211" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="49" value="29.7585" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="49" value="70.1394" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="49" value="0.604563" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="49" value="89.6436" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="49" value="-8.54752" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="49" value="-0.24647" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="ex2_rolling" id="3" localization="8" tooltip="" x="891" y="198"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onDoExercise" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onDidExercise" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="rolling" id="16" localization="8" tooltip="" x="259" y="331"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="80" size="80"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe80" index="80"><Diagram><Box name="Goto And Play (number)" id="1" localization="8" tooltip="Jump to the frame number set in parameters and start playing the parent timeline." x="73" y="14"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onGo(self):
        self.gotoAndPlayParent(self.getParameter("Frame number"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /><Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="-14.2" /><Key frame="70" value="-14.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="-5.5" /><Key frame="70" value="5.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="9" value="-8" /><Key frame="30" value="-13.1" /><Key frame="40" value="-8" /><Key frame="70" value="-13.1" /><Key frame="79" value="-8" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="9" value="0" /><Key frame="30" value="-9.5" /><Key frame="40" value="0" /><Key frame="70" value="9.5" /><Key frame="79" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="9" value="-1.1" /><Key frame="30" value="-3.6" /><Key frame="40" value="-1.1" /><Key frame="70" value="3.6" /><Key frame="79" value="1.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="9" value="-89.2969" /><Key frame="20" value="-79.5" /><Key frame="30" value="-54" /><Key frame="40" value="-74.2676" /><Key frame="50" value="-89.2969" /><Key frame="60" value="-79.5" /><Key frame="70" value="-54" /><Key frame="79" value="-74.2676" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="9" value="-12.1289" /><Key frame="20" value="-13.4" /><Key frame="30" value="-13" /><Key frame="40" value="-15.1172" /><Key frame="50" value="-12.1289" /><Key frame="60" value="-13.4" /><Key frame="70" value="-13" /><Key frame="79" value="-15.1172" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="9" value="0.0316344" /><Key frame="20" value="0.0421792" /><Key frame="30" value="0.0316344" /><Key frame="40" value="0.0421792" /><Key frame="50" value="0.0316344" /><Key frame="60" value="0.0421792" /><Key frame="70" value="0.0316344" /><Key frame="79" value="0.0421792" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="9" value="-14.2383" /><Key frame="20" value="-11.8" /><Key frame="30" value="-19.9" /><Key frame="40" value="-29.707" /><Key frame="50" value="-14.2383" /><Key frame="60" value="-11.8" /><Key frame="70" value="-19.9" /><Key frame="79" value="-29.707" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="9" value="17.1387" /><Key frame="20" value="17.6" /><Key frame="30" value="7.6" /><Key frame="40" value="13.5" /><Key frame="50" value="17.1387" /><Key frame="60" value="17.6" /><Key frame="70" value="7.6" /><Key frame="79" value="13.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="9" value="-73.5678" /><Key frame="20" value="-69.9" /><Key frame="30" value="-68.9" /><Key frame="40" value="-78.4897" /><Key frame="50" value="-73.5678" /><Key frame="60" value="-69.9" /><Key frame="70" value="-68.9" /><Key frame="79" value="-78.4897" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="9" value="54.6" /><Key frame="20" value="74.1" /><Key frame="30" value="89.2" /><Key frame="40" value="79.3652" /><Key frame="50" value="54.6" /><Key frame="60" value="74.1" /><Key frame="70" value="89.2" /><Key frame="79" value="79.3652" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="9" value="12.7" /><Key frame="20" value="15.3" /><Key frame="30" value="12.4" /><Key frame="40" value="13.8867" /><Key frame="50" value="12.7" /><Key frame="60" value="15.3" /><Key frame="70" value="12.4" /><Key frame="79" value="13.8867" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="9" value="0.0298769" /><Key frame="20" value="0.039543" /><Key frame="30" value="0.0298769" /><Key frame="40" value="0.039543" /><Key frame="50" value="0.0298769" /><Key frame="60" value="0.039543" /><Key frame="70" value="0.0298769" /><Key frame="79" value="0.039543" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="9" value="-20.127" /><Key frame="20" value="-29.7" /><Key frame="30" value="-14" /><Key frame="40" value="-12.041" /><Key frame="50" value="-20.127" /><Key frame="60" value="-29.7" /><Key frame="70" value="-14" /><Key frame="79" value="-12.041" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="9" value="-7.5" /><Key frame="20" value="-14.1" /><Key frame="30" value="-16.9" /><Key frame="40" value="-17.4" /><Key frame="50" value="-7.5" /><Key frame="60" value="-14.1" /><Key frame="70" value="-16.9" /><Key frame="79" value="-17.4" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="9" value="69.0805" /><Key frame="20" value="78.5" /><Key frame="30" value="73.4" /><Key frame="40" value="69.6957" /><Key frame="50" value="69.0805" /><Key frame="60" value="78.5" /><Key frame="70" value="73.4" /><Key frame="79" value="69.6957" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="go_rolling" id="23" localization="8" tooltip="" x="215" y="163"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="40" value="-12.0788" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="40" value="-1.01267" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="40" value="-5.90487" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="40" value="-0.306975" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="40" value="1.44546" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="40" value="-84.4031" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="40" value="-16.5725" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="40" value="0.0737355" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="40" value="-6.35622" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="40" value="16.3845" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="40" value="-67.9382" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="40" value="50.2995" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="40" value="17.0681" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="40" value="0.0721082" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="40" value="-8.93491" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="40" value="-7.46685" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="40" value="60.8705" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="466" y="30"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="212" y="31"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("bring your hands up in front of your chest and roll, slowly leaning side to side")]]></content></script><pluginContent><text><![CDATA[bring your hands up in front of your chest and roll, slowly leaning side to side]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Link inputowner="16" indexofinput="2" outputowner="23" indexofoutput="4" /><Link inputowner="23" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="16" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ex3_serve" id="4" localization="8" tooltip="" x="891" y="309"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onDoExercise" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onDidExercise" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="serve" id="17" localization="8" tooltip="" x="156" y="272"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="325" size="325"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe325" index="325"><Diagram><Box name="Goto And Play (number)" id="1" localization="8" tooltip="Jump to the frame number set in parameters and start playing the parent timeline." x="72" y="32"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onGo(self):
        self.gotoAndPlayParent(self.getParameter("Frame number"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /><Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="14" value="-83.7598" /><Key frame="34" value="-39.9" /><Key frame="54" value="-73.2" /><Key frame="74" value="-40.957" /><Key frame="94" value="-89.3848" /><Key frame="113" value="-26.5" /><Key frame="133" value="-89.1" /><Key frame="154" value="-38.9" /><Key frame="174" value="-80.4" /><Key frame="194" value="-24.3" /><Key frame="214" value="-89.1" /><Key frame="234" value="-26.5" /><Key frame="253" value="-89.3848" /><Key frame="274" value="-40.957" /><Key frame="292" value="-73.2" /><Key frame="314" value="-39.9" /><Key frame="324" value="-58.8601" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="14" value="-42.7148" /><Key frame="34" value="-33.5" /><Key frame="54" value="-41.6" /><Key frame="74" value="-35.5957" /><Key frame="94" value="-72.6855" /><Key frame="113" value="-68.9" /><Key frame="133" value="-103.3" /><Key frame="154" value="-119.2" /><Key frame="174" value="-117.2" /><Key frame="194" value="-118.3" /><Key frame="214" value="-103.3" /><Key frame="234" value="-68.9" /><Key frame="253" value="-72.6855" /><Key frame="274" value="-35.5957" /><Key frame="292" value="-41.6" /><Key frame="314" value="-33.5" /><Key frame="324" value="-37.6259" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="14" value="0.02" /><Key frame="34" value="0.98" /><Key frame="54" value="0.02" /><Key frame="74" value="0.98" /><Key frame="94" value="0.02" /><Key frame="113" value="0.98" /><Key frame="133" value="0.02" /><Key frame="154" value="0.98" /><Key frame="174" value="0.02" /><Key frame="194" value="0.98" /><Key frame="214" value="0.02" /><Key frame="234" value="0.98" /><Key frame="253" value="0.02" /><Key frame="274" value="0.98" /><Key frame="292" value="0.02" /><Key frame="314" value="0.98" /><Key frame="324" value="0.570966" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="14" value="36.5625" /><Key frame="34" value="15.9082" /><Key frame="54" value="25.4004" /><Key frame="74" value="16.2598" /><Key frame="94" value="71.0156" /><Key frame="113" value="15.1" /><Key frame="133" value="71.2" /><Key frame="154" value="24.1" /><Key frame="174" value="58.8" /><Key frame="194" value="11.8" /><Key frame="214" value="71.2" /><Key frame="234" value="15.1" /><Key frame="253" value="71.0156" /><Key frame="274" value="16.2598" /><Key frame="292" value="25.4004" /><Key frame="314" value="15.9082" /><Key frame="324" value="25.1417" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="14" value="24.9609" /><Key frame="34" value="1.49414" /><Key frame="54" value="13.3" /><Key frame="74" value="5.44922" /><Key frame="94" value="19.0723" /><Key frame="113" value="4.7" /><Key frame="133" value="1.2" /><Key frame="154" value="9.4" /><Key frame="174" value="5" /><Key frame="194" value="17.5" /><Key frame="214" value="1.2" /><Key frame="234" value="4.7" /><Key frame="253" value="19.0723" /><Key frame="274" value="5.44922" /><Key frame="292" value="13.3" /><Key frame="314" value="1.49414" /><Key frame="324" value="11.9875" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="14" value="-104.5" /><Key frame="34" value="-104.5" /><Key frame="54" value="-104.5" /><Key frame="74" value="-104.5" /><Key frame="94" value="-90.1793" /><Key frame="113" value="-96.1" /><Key frame="133" value="-78.3" /><Key frame="154" value="-57.7" /><Key frame="174" value="-64" /><Key frame="194" value="-62.1" /><Key frame="214" value="-78.3" /><Key frame="234" value="-96.1" /><Key frame="253" value="-90.1793" /><Key frame="274" value="-104.5" /><Key frame="292" value="-104.5" /><Key frame="314" value="-104.5" /><Key frame="324" value="-104.295" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="14" value="24.2578" /><Key frame="34" value="80.5957" /><Key frame="54" value="38.7" /><Key frame="74" value="89.1211" /><Key frame="94" value="26.1914" /><Key frame="113" value="89" /><Key frame="133" value="41" /><Key frame="154" value="73.2" /><Key frame="174" value="39.3" /><Key frame="194" value="83.8" /><Key frame="214" value="41" /><Key frame="234" value="89" /><Key frame="253" value="26.1914" /><Key frame="274" value="89.1211" /><Key frame="292" value="38.7" /><Key frame="314" value="80.5957" /><Key frame="324" value="56.3122" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="14" value="118.564" /><Key frame="34" value="117.334" /><Key frame="54" value="119.5" /><Key frame="74" value="103.975" /><Key frame="94" value="68.7305" /><Key frame="113" value="72.4" /><Key frame="133" value="35.6" /><Key frame="154" value="41.6" /><Key frame="174" value="33.5" /><Key frame="194" value="42.7" /><Key frame="214" value="35.6" /><Key frame="234" value="72.4" /><Key frame="253" value="68.7305" /><Key frame="274" value="103.975" /><Key frame="292" value="119.5" /><Key frame="314" value="117.334" /><Key frame="324" value="118.014" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="14" value="0.98" /><Key frame="34" value="0.02" /><Key frame="54" value="0.98" /><Key frame="74" value="0.02" /><Key frame="94" value="0.98" /><Key frame="113" value="0.02" /><Key frame="133" value="0.98" /><Key frame="154" value="0.02" /><Key frame="174" value="0.98" /><Key frame="194" value="0.02" /><Key frame="214" value="0.98" /><Key frame="234" value="0.02" /><Key frame="253" value="0.98" /><Key frame="274" value="0.02" /><Key frame="292" value="0.98" /><Key frame="314" value="0.02" /><Key frame="324" value="0.429034" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="14" value="11.4258" /><Key frame="34" value="58.9" /><Key frame="54" value="24.3457" /><Key frame="74" value="71.3672" /><Key frame="94" value="14.9414" /><Key frame="113" value="70.9" /><Key frame="133" value="16.3" /><Key frame="154" value="25.4" /><Key frame="174" value="15.9" /><Key frame="194" value="36.6" /><Key frame="214" value="16.3" /><Key frame="234" value="70.9" /><Key frame="253" value="14.9414" /><Key frame="274" value="71.3672" /><Key frame="292" value="24.3457" /><Key frame="314" value="58.9" /><Key frame="324" value="38.3794" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="14" value="-17.7539" /><Key frame="34" value="-5.5" /><Key frame="54" value="-9.66797" /><Key frame="74" value="-1.05469" /><Key frame="94" value="-4.92188" /><Key frame="113" value="-19" /><Key frame="133" value="-5.4" /><Key frame="154" value="-13.3" /><Key frame="174" value="-1.5" /><Key frame="194" value="-25" /><Key frame="214" value="-5.4" /><Key frame="234" value="-19" /><Key frame="253" value="-4.92188" /><Key frame="274" value="-1.05469" /><Key frame="292" value="-9.66797" /><Key frame="314" value="-5.5" /><Key frame="324" value="-10.9745" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="14" value="61.8734" /><Key frame="34" value="63.807" /><Key frame="54" value="57.5667" /><Key frame="74" value="77.7818" /><Key frame="94" value="96.239" /><Key frame="113" value="90.3" /><Key frame="133" value="104.5" /><Key frame="154" value="104.5" /><Key frame="174" value="104.5" /><Key frame="194" value="104.5" /><Key frame="214" value="104.5" /><Key frame="234" value="90.3" /><Key frame="253" value="96.239" /><Key frame="274" value="77.7818" /><Key frame="292" value="57.5667" /><Key frame="314" value="63.807" /><Key frame="324" value="62.7991" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="16" value="-2.4" /><Key frame="55" value="-7.4" /><Key frame="85" value="9.6" /><Key frame="155" value="-7.4" /><Key frame="196" value="-2.4" /><Key frame="235" value="-7.4" /><Key frame="265" value="9.6" /><Key frame="293" value="-7.4" /><Key frame="315" value="-5.22272" /><Key frame="324" value="-3.25541" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0"><Key frame="16" value="-25" /><Key frame="85" value="-7.7" /><Key frame="196" value="25" /><Key frame="265" value="7.7" /><Key frame="315" value="-15.1255" /><Key frame="324" value="-24.7044" /></ActuatorCurve><ActuatorCurve name="" actuator="HipPitch" mute="0" unit="0"><Key frame="15" value="-16.6" /><Key frame="84" value="-2.63671" /><Key frame="195" value="-16.6" /><Key frame="265" value="-2.63671" /><Key frame="324" value="-15.5259" /></ActuatorCurve><ActuatorCurve name="" actuator="HipRoll" mute="0" unit="0"><Key frame="15" value="-7.2" /><Key frame="84" value="-0.175782" /><Key frame="195" value="7.2" /><Key frame="265" value="-0.175782" /><Key frame="324" value="-6.72439" /></ActuatorCurve><ActuatorCurve name="" actuator="KneePitch" mute="0" unit="0"><Key frame="15" value="5.9" /><Key frame="84" value="-1.14258" /><Key frame="195" value="5.9" /><Key frame="265" value="-1.14258" /><Key frame="324" value="5.64422" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="go_serve" id="18" localization="8" tooltip="" x="152" y="115"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="61"><ActuatorList model=""><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="42" value="-1" /><Key frame="61" value="-3.25541" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0"><Key frame="42" value="-11.6" /><Key frame="61" value="-24.7044" /></ActuatorCurve><ActuatorCurve name="" actuator="HipPitch" mute="0" unit="0"><Key frame="41" value="-16.6" /><Key frame="61" value="-15.5259" /></ActuatorCurve><ActuatorCurve name="" actuator="HipRoll" mute="0" unit="0"><Key frame="41" value="-4.2" /><Key frame="61" value="-6.72439" /></ActuatorCurve><ActuatorCurve name="" actuator="KneePitch" mute="0" unit="0"><Key frame="41" value="5.9" /><Key frame="61" value="5.64422" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="40" value="-75.7" /><Key frame="61" value="-58.8601" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="40" value="-45" /><Key frame="61" value="-37.6259" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="40" value="0.35" /><Key frame="61" value="0.570966" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="40" value="43.6" /><Key frame="61" value="25.1417" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="40" value="22.9" /><Key frame="61" value="11.9875" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="40" value="-104.5" /><Key frame="61" value="-104.295" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="40" value="19.3" /><Key frame="61" value="56.3122" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="40" value="113.6" /><Key frame="61" value="118.014" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="40" value="0.76" /><Key frame="61" value="0.429034" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="40" value="23.4" /><Key frame="61" value="38.3794" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="40" value="-17.8" /><Key frame="61" value="-10.9745" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="40" value="61.8734" /><Key frame="61" value="62.7991" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="393" y="17"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="139" y="18"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("strech out your arms in front of you as far as you can")]]></content></script><pluginContent><text><![CDATA[strech out your arms in front of you as far as you can]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Link inputowner="17" indexofinput="2" outputowner="18" indexofoutput="4" /><Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="17" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="17" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ex4_wave" id="5" localization="8" tooltip="" x="900" y="481"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onDoExercise" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onDidExercise" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="go_waves" id="24" localization="8" tooltip="" x="162" y="111"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40"><ActuatorList model=""><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="40" value="-10.9077" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0"><Key frame="40" value="0.360364" /></ActuatorCurve><ActuatorCurve name="" actuator="HipPitch" mute="0" unit="0"><Key frame="40" value="-0.909916" /></ActuatorCurve><ActuatorCurve name="" actuator="HipRoll" mute="0" unit="0"><Key frame="40" value="0.283141" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="40" value="-0.334034" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="40" value="-26.3568" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="40" value="-30.2856" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="40" value="0.591279" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="40" value="-55.5796" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="40" value="30.7761" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="40" value="3.32357" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="40" value="15.7433" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="40" value="17.7246" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="40" value="0.591248" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="40" value="-66.6732" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="40" value="-12.0627" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="40" value="-0.667718" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="wave" id="25" localization="8" tooltip="" x="161" y="249"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="132" size="132"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe132" index="132"><Diagram><Box name="Goto And Play (number)" id="1" localization="8" tooltip="Jump to the frame number set in parameters and start playing the parent timeline." x="79" y="50"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onGo(self):
        self.gotoAndPlayParent(self.getParameter("Frame number"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /><Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="30" value="-6.2" /><Key frame="68" value="-14.1" /><Key frame="98" value="-35.3" /><Key frame="131" value="-26.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="30" value="-13" /><Key frame="68" value="-11.7" /><Key frame="98" value="-25.4004" /><Key frame="131" value="-25.4" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="30" value="0.584359" /><Key frame="68" value="0.584359" /><Key frame="98" value="0.584359" /><Key frame="131" value="0.584359" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="30" value="-81.9" /><Key frame="68" value="-85.4" /><Key frame="98" value="-79.2773" /><Key frame="131" value="-73.3" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="30" value="81.2" /><Key frame="68" value="12.2" /><Key frame="98" value="18.6" /><Key frame="131" value="33.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="14.8" /><Key frame="68" value="1" /><Key frame="98" value="10.9841" /><Key frame="131" value="4" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="30.6" /><Key frame="68" value="26.1" /><Key frame="98" value="5.88868" /><Key frame="131" value="14.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="23.8" /><Key frame="68" value="25.4" /><Key frame="98" value="12.832" /><Key frame="131" value="11.7" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="0.584359" /><Key frame="68" value="0.584359" /><Key frame="98" value="0.584359" /><Key frame="131" value="0.584359" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="-78.7" /><Key frame="68" value="-73.3" /><Key frame="98" value="-82.5293" /><Key frame="131" value="-85.4" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-14.5" /><Key frame="68" value="-33.6" /><Key frame="98" value="-81.7383" /><Key frame="131" value="-12.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="10.8" /><Key frame="68" value="-4" /><Key frame="98" value="14.9392" /><Key frame="131" value="-1" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="-6.1" /><Key frame="98" value="-6.1" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="24.8" /><Key frame="68" value="-5" /><Key frame="98" value="-24.6" /><Key frame="131" value="5" /></ActuatorCurve><ActuatorCurve name="" actuator="HipPitch" mute="0" unit="0"><Key frame="66" value="-0.4" /><Key frame="68" value="0" /><Key frame="129" value="0.4" /><Key frame="131" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="HipRoll" mute="0" unit="0"><Key frame="30" value="14.1" /><Key frame="66" value="0" /><Key frame="68" value="0" /><Key frame="98" value="-14.1" /><Key frame="129" value="0" /><Key frame="131" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="403" y="11"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="149" y="12"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Strech out your arms to the sky and make yourself tall. Wave side to side.")]]></content></script><pluginContent><text><![CDATA[Strech out your arms to the sky and make yourself tall. Wave side to side.]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Link inputowner="25" indexofinput="2" outputowner="24" indexofoutput="4" /><Link inputowner="24" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="25" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="25" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ex5_chicken" id="7" localization="8" tooltip="" x="898" y="599"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onDoExercise" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onDidExercise" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="chicken" id="15" localization="8" tooltip="" x="162" y="286"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="91" size="91"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe91" index="91"><Diagram><Box name="Goto And Play (number)" id="1" localization="8" tooltip="Jump to the frame number set in parameters and start playing the parent timeline." x="121" y="91"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onGo(self):
        self.gotoAndPlayParent(self.getParameter("Frame number"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /><Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="10" value="5.5" /><Key frame="30" value="-2.8" /><Key frame="39" value="-10.8" /><Key frame="50" value="-16.8" /><Key frame="52" value="-16.8" /><Key frame="60" value="-10.8" /><Key frame="70" value="-2.8" /><Key frame="90" value="5.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="10" value="-17.3" /><Key frame="30" value="-5.3" /><Key frame="50" value="-0.4" /><Key frame="52" value="-0.4" /><Key frame="70" value="-5.3" /><Key frame="90" value="-17.3" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="10" value="-89.3" /><Key frame="19" value="-77.3" /><Key frame="30" value="-78.7" /><Key frame="39" value="-89.5" /><Key frame="50" value="-88.9" /><Key frame="52" value="-88.9" /><Key frame="60" value="-89.5" /><Key frame="70" value="-78.7" /><Key frame="80" value="-77.3" /><Key frame="90" value="-89.3" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="10" value="-70.6" /><Key frame="19" value="-67.3" /><Key frame="30" value="-65.5" /><Key frame="39" value="-54.5" /><Key frame="50" value="-58.6" /><Key frame="52" value="-58.6" /><Key frame="60" value="-54.5" /><Key frame="70" value="-65.5" /><Key frame="80" value="-67.3" /><Key frame="90" value="-70.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="10" value="0.02" /><Key frame="19" value="0.02" /><Key frame="30" value="0.55" /><Key frame="39" value="0.83" /><Key frame="50" value="0.98" /><Key frame="52" value="0.98" /><Key frame="60" value="0.83" /><Key frame="70" value="0.55" /><Key frame="80" value="0.02" /><Key frame="90" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="10" value="-11.5" /><Key frame="19" value="-7.9" /><Key frame="30" value="-19.6" /><Key frame="39" value="-65.7" /><Key frame="50" value="-44.4" /><Key frame="52" value="-44.4" /><Key frame="60" value="-65.7" /><Key frame="70" value="-19.6" /><Key frame="80" value="-7.9" /><Key frame="90" value="-11.5" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="10" value="6" /><Key frame="19" value="2.8" /><Key frame="30" value="18.6" /><Key frame="39" value="38.8" /><Key frame="50" value="87.1" /><Key frame="52" value="87.1" /><Key frame="60" value="38.8" /><Key frame="70" value="18.6" /><Key frame="80" value="2.8" /><Key frame="90" value="6" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="10" value="-36.9" /><Key frame="19" value="-36.7" /><Key frame="30" value="-16.9" /><Key frame="39" value="-17.2" /><Key frame="50" value="-8.4" /><Key frame="52" value="-8.4" /><Key frame="60" value="-17.2" /><Key frame="70" value="-16.9" /><Key frame="80" value="-36.7" /><Key frame="90" value="-36.9" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="89.3" /><Key frame="19" value="77.3" /><Key frame="30" value="78.7" /><Key frame="39" value="89.5" /><Key frame="50" value="88.9" /><Key frame="52" value="88.9" /><Key frame="60" value="89.5" /><Key frame="70" value="78.7" /><Key frame="80" value="77.3" /><Key frame="90" value="89.3" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="10" value="70.6" /><Key frame="19" value="67.3" /><Key frame="30" value="65.5" /><Key frame="39" value="54.5" /><Key frame="50" value="58.6" /><Key frame="52" value="58.6" /><Key frame="60" value="54.5" /><Key frame="70" value="65.5" /><Key frame="80" value="67.3" /><Key frame="90" value="70.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="10" value="0.02" /><Key frame="19" value="0.02" /><Key frame="30" value="0.55" /><Key frame="39" value="0.83" /><Key frame="50" value="0.98" /><Key frame="52" value="0.98" /><Key frame="60" value="0.83" /><Key frame="70" value="0.55" /><Key frame="80" value="0.02" /><Key frame="90" value="0.02" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="-11.5" /><Key frame="19" value="-7.9" /><Key frame="30" value="-19.6" /><Key frame="39" value="-65.7" /><Key frame="50" value="-44.4" /><Key frame="52" value="-44.4" /><Key frame="60" value="-65.7" /><Key frame="70" value="-19.6" /><Key frame="80" value="-7.9" /><Key frame="90" value="-11.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-6" /><Key frame="19" value="-2.8" /><Key frame="30" value="-18.6" /><Key frame="39" value="-38.8" /><Key frame="50" value="-87.1" /><Key frame="52" value="-87.1" /><Key frame="60" value="-38.8" /><Key frame="70" value="-18.6" /><Key frame="80" value="-2.8" /><Key frame="90" value="-6" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="10" value="36.9" /><Key frame="19" value="36.7" /><Key frame="30" value="16.9" /><Key frame="39" value="17.2" /><Key frame="50" value="8.4" /><Key frame="52" value="8.4" /><Key frame="60" value="17.2" /><Key frame="70" value="16.9" /><Key frame="80" value="36.7" /><Key frame="90" value="36.9" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="go_chicken" id="22" localization="8" tooltip="" x="161" y="121"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40"><ActuatorList model=""><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="40" value="5.09944" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="40" value="-14.6147" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="40" value="-84.6205" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="40" value="-74.13" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="40" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="40" value="-7.79115" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="40" value="10.1361" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="40" value="-36.5938" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="40" value="84.6205" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="40" value="74.13" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="40" value="0.02" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="40" value="-7.79115" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="40" value="-10.1361" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="40" value="36.5938" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="399" y="19"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="145" y="20"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Put your hands on your neck, move your elbows to the back and squeeze your shoulder blades together")]]></content></script><pluginContent><text><![CDATA[Put your hands on your neck, move your elbows to the back and squeeze your shoulder blades together]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Link inputowner="15" indexofinput="2" outputowner="22" indexofoutput="4" /><Link inputowner="22" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="15" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ex6_darja" id="8" localization="8" tooltip="" x="901" y="705"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onDoExercise" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onDidExercise" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="darjas_exercise" id="13" localization="8" tooltip="" x="165" y="263"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="133" size="133"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe133" index="133"><Diagram><Box name="Goto And Play (number)" id="1" localization="8" tooltip="Jump to the frame number set in parameters and start playing the parent timeline." x="76" y="23"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onGo(self):
        self.gotoAndPlayParent(self.getParameter("Frame number"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /><Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="10" value="-79.6" /><Key frame="12" value="-79.6" /><Key frame="30" value="-80.6" /><Key frame="32" value="-80.6" /><Key frame="50" value="-86.5" /><Key frame="52" value="-86.5" /><Key frame="61" value="-75.2" /><Key frame="69" value="-0.5" /><Key frame="72" value="-0.5" /><Key frame="81" value="-75.2" /><Key frame="90" value="-86.5" /><Key frame="92" value="-86.5" /><Key frame="110" value="-80.6" /><Key frame="112" value="-80.6" /><Key frame="130" value="-79.6" /><Key frame="132" value="-79.6" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="10" value="-88.6" /><Key frame="12" value="-88.6" /><Key frame="30" value="-74.4" /><Key frame="32" value="-74.4" /><Key frame="50" value="-119.2" /><Key frame="52" value="-119.2" /><Key frame="61" value="-13.3" /><Key frame="69" value="-1.5" /><Key frame="72" value="-1.5" /><Key frame="81" value="-13.3" /><Key frame="90" value="-119.2" /><Key frame="92" value="-119.2" /><Key frame="110" value="-74.4" /><Key frame="112" value="-74.4" /><Key frame="130" value="-88.6" /><Key frame="132" value="-88.6" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="10" value="0.98" /><Key frame="12" value="0.98" /><Key frame="30" value="0.98" /><Key frame="32" value="0.98" /><Key frame="50" value="0.98" /><Key frame="52" value="0.98" /><Key frame="61" value="0.98" /><Key frame="69" value="0.98" /><Key frame="72" value="0.98" /><Key frame="81" value="0.98" /><Key frame="90" value="0.98" /><Key frame="92" value="0.98" /><Key frame="110" value="0.98" /><Key frame="112" value="0.98" /><Key frame="130" value="0.98" /><Key frame="132" value="0.98" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="10" value="80" /><Key frame="12" value="80" /><Key frame="30" value="64.9" /><Key frame="32" value="64.9" /><Key frame="50" value="25.7" /><Key frame="52" value="25.7" /><Key frame="61" value="-77" /><Key frame="69" value="-83.4" /><Key frame="72" value="-83.4" /><Key frame="81" value="-77" /><Key frame="90" value="25.7" /><Key frame="92" value="25.7" /><Key frame="110" value="64.9" /><Key frame="112" value="64.9" /><Key frame="130" value="80" /><Key frame="132" value="80" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="10" value="11" /><Key frame="12" value="11" /><Key frame="30" value="67.3" /><Key frame="32" value="67.3" /><Key frame="50" value="79.1" /><Key frame="52" value="79.1" /><Key frame="61" value="54.2" /><Key frame="69" value="0.5" /><Key frame="72" value="0.5" /><Key frame="81" value="54.2" /><Key frame="90" value="79.1" /><Key frame="92" value="79.1" /><Key frame="110" value="67.3" /><Key frame="112" value="67.3" /><Key frame="130" value="11" /><Key frame="132" value="11" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="10" value="-17" /><Key frame="12" value="-17" /><Key frame="30" value="23.5" /><Key frame="32" value="23.5" /><Key frame="50" value="9.9" /><Key frame="52" value="9.9" /><Key frame="61" value="-5.18757" /><Key frame="69" value="-14.2" /><Key frame="72" value="-14.2" /><Key frame="81" value="-5.18757" /><Key frame="90" value="9.9" /><Key frame="92" value="9.9" /><Key frame="110" value="23.5" /><Key frame="112" value="23.5" /><Key frame="130" value="-17" /><Key frame="132" value="-17" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="79.6" /><Key frame="12" value="79.6" /><Key frame="30" value="80.6" /><Key frame="32" value="80.6" /><Key frame="50" value="86.5" /><Key frame="52" value="86.5" /><Key frame="61" value="75.2" /><Key frame="69" value="0.5" /><Key frame="72" value="0.5" /><Key frame="81" value="75.2" /><Key frame="90" value="86.5" /><Key frame="92" value="86.5" /><Key frame="110" value="80.6" /><Key frame="112" value="80.6" /><Key frame="130" value="79.6" /><Key frame="132" value="79.6" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0"><Key frame="10" value="88.6" /><Key frame="12" value="88.6" /><Key frame="30" value="74.4" /><Key frame="32" value="74.4" /><Key frame="50" value="119.2" /><Key frame="52" value="119.2" /><Key frame="61" value="13.3" /><Key frame="69" value="1.5" /><Key frame="72" value="1.5" /><Key frame="81" value="13.3" /><Key frame="90" value="119.2" /><Key frame="92" value="119.2" /><Key frame="110" value="74.4" /><Key frame="112" value="74.4" /><Key frame="130" value="88.6" /><Key frame="132" value="88.6" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="10" value="0.98" /><Key frame="12" value="0.98" /><Key frame="30" value="0.98" /><Key frame="32" value="0.98" /><Key frame="50" value="0.98" /><Key frame="52" value="0.98" /><Key frame="61" value="0.98" /><Key frame="69" value="0.98" /><Key frame="72" value="0.98" /><Key frame="81" value="0.98" /><Key frame="90" value="0.98" /><Key frame="92" value="0.98" /><Key frame="110" value="0.98" /><Key frame="112" value="0.98" /><Key frame="130" value="0.98" /><Key frame="132" value="0.98" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="80" /><Key frame="12" value="80" /><Key frame="30" value="64.9" /><Key frame="32" value="64.9" /><Key frame="50" value="25.7" /><Key frame="52" value="25.7" /><Key frame="61" value="-77" /><Key frame="69" value="-83.4" /><Key frame="72" value="-83.4" /><Key frame="81" value="-77" /><Key frame="90" value="25.7" /><Key frame="92" value="25.7" /><Key frame="110" value="64.9" /><Key frame="112" value="64.9" /><Key frame="130" value="80" /><Key frame="132" value="80" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-11" /><Key frame="12" value="-11" /><Key frame="30" value="-67.3" /><Key frame="32" value="-67.3" /><Key frame="50" value="-79.1" /><Key frame="52" value="-79.1" /><Key frame="61" value="-54.2" /><Key frame="69" value="-0.5" /><Key frame="72" value="-0.5" /><Key frame="81" value="-54.2" /><Key frame="90" value="-79.1" /><Key frame="92" value="-79.1" /><Key frame="110" value="-67.3" /><Key frame="112" value="-67.3" /><Key frame="130" value="-11" /><Key frame="132" value="-11" /></ActuatorCurve><ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0"><Key frame="10" value="17" /><Key frame="12" value="17" /><Key frame="30" value="-23.5" /><Key frame="32" value="-23.5" /><Key frame="50" value="-9.9" /><Key frame="52" value="-9.9" /><Key frame="61" value="-5.18757" /><Key frame="69" value="14.2" /><Key frame="72" value="14.2" /><Key frame="81" value="-5.18757" /><Key frame="90" value="-9.9" /><Key frame="92" value="-9.9" /><Key frame="110" value="-23.5" /><Key frame="112" value="-23.5" /><Key frame="130" value="17" /><Key frame="132" value="17" /></ActuatorCurve><ActuatorCurve name="" actuator="HipPitch" mute="0" unit="0"><Key frame="14" value="-14.4" /><Key frame="68" value="-2.4" /></ActuatorCurve><ActuatorCurve name="" actuator="KneePitch" mute="0" unit="0"><Key frame="14" value="10.6" /><Key frame="68" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="8" value="7.7" /><Key frame="70" value="-23.3" /><Key frame="128" value="0.7" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="go_darja" id="20" localization="8" tooltip="" x="161" y="122"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40"><ActuatorList model=""><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="40" value="6.98245" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="40" value="-0.0858952" /></ActuatorCurve><ActuatorCurve name="" actuator="HipPitch" mute="0" unit="0"><Key frame="40" value="-11.4302" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="40" value="-0.0212009" /></ActuatorCurve><ActuatorCurve name="" actuator="KneePitch" mute="0" unit="0"><Key frame="40" value="7.60972" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="40" value="-76.1704" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="40" value="-87.2324" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="40" value="0.955034" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="40" value="80.8295" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="40" value="10.6555" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="40" value="-15.8247" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0"><Key frame="40" value="76.1704" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0"><Key frame="40" value="87.2324" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="40" value="0.955034" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="40" value="80.8295" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="40" value="-10.6555" /></ActuatorCurve><ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0"><Key frame="40" value="15.8247" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="402" y="21"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="148" y="22"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("follow my arm movements up and down. Make sure to stretch you arms all the way to the sky")]]></content></script><pluginContent><text><![CDATA[follow my arm movements up and down. Make sure to stretch you arms all the way to the sky]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Link inputowner="13" indexofinput="2" outputowner="20" indexofoutput="4" /><Link inputowner="20" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="13" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ex7_punch_front" id="9" localization="8" tooltip="" x="907" y="994"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onDoExercise" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onDidExercise" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="go_airboxing" id="15" localization="8" tooltip="" x="149" y="163"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40"><ActuatorList model=""><ActuatorCurve name="" actuator="HipRoll" mute="0" unit="0"><Key frame="40" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="40" value="-88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="40" value="-3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="40" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="40" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="40" value="27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="40" value="-103.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0"><Key frame="40" value="88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0"><Key frame="40" value="3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="40" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="40" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="40" value="-27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0"><Key frame="40" value="103.5" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="air_boxing_FRONT" id="27" localization="8" tooltip="" x="162" y="319"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="81" size="81"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe81" index="81"><Diagram><Box name="Goto And Play (number)" id="1" localization="8" tooltip="Jump to the frame number set in parameters and start playing the parent timeline." x="88" y="27"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onGo(self):
        self.gotoAndPlayParent(self.getParameter("Frame number"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /><Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="" actuator="HipRoll" mute="0" unit="0"><Key frame="10" value="0" /><Key frame="18" value="2.7" /><Key frame="20" value="2.7" /><Key frame="26" value="2.7" /><Key frame="30" value="2.7" /><Key frame="40" value="0" /><Key frame="50" value="0" /><Key frame="58" value="-2.7" /><Key frame="60" value="-2.7" /><Key frame="66" value="-2.7" /><Key frame="70" value="-2.7" /><Key frame="80" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="10" value="-88.5" /><Key frame="18" value="-88.5" /><Key frame="20" value="-88.5" /><Key frame="26" value="-0.5" /><Key frame="30" value="-0.5" /><Key frame="40" value="-88.5" /><Key frame="50" value="-88.5" /><Key frame="66" value="-88.5" /><Key frame="80" value="-88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="10" value="-3.3" /><Key frame="18" value="33.5" /><Key frame="20" value="33.5" /><Key frame="26" value="-30.6" /><Key frame="30" value="-30.6" /><Key frame="40" value="-3.3" /><Key frame="50" value="-3.3" /><Key frame="80" value="-3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="10" value="0.02" /><Key frame="40" value="0.02" /><Key frame="50" value="0.02" /><Key frame="80" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="10" value="4.1" /><Key frame="18" value="-44.2" /><Key frame="20" value="-44.2" /><Key frame="26" value="2.8" /><Key frame="30" value="2.8" /><Key frame="40" value="4.1" /><Key frame="50" value="4.1" /><Key frame="66" value="11.6" /><Key frame="80" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="10" value="27.1" /><Key frame="18" value="64.5" /><Key frame="20" value="64.5" /><Key frame="26" value="1.6" /><Key frame="30" value="1.6" /><Key frame="40" value="27.1" /><Key frame="50" value="27.1" /><Key frame="66" value="29.6" /><Key frame="80" value="27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="10" value="-103.5" /><Key frame="18" value="5.2" /><Key frame="20" value="5.2" /><Key frame="26" value="31.3" /><Key frame="30" value="31.3" /><Key frame="40" value="-103.5" /><Key frame="50" value="-103.5" /><Key frame="80" value="-103.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="88.5" /><Key frame="26" value="88.5" /><Key frame="40" value="88.5" /><Key frame="50" value="88.5" /><Key frame="58" value="88.5" /><Key frame="60" value="88.5" /><Key frame="66" value="0.5" /><Key frame="70" value="0.5" /><Key frame="80" value="88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0"><Key frame="10" value="3.3" /><Key frame="40" value="3.3" /><Key frame="50" value="3.3" /><Key frame="58" value="-33.5" /><Key frame="60" value="-33.5" /><Key frame="66" value="30.6" /><Key frame="70" value="30.6" /><Key frame="80" value="3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="10" value="0.02" /><Key frame="40" value="0.02" /><Key frame="50" value="0.02" /><Key frame="80" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="4.1" /><Key frame="26" value="11.6" /><Key frame="40" value="4.1" /><Key frame="50" value="4.1" /><Key frame="58" value="-44.2" /><Key frame="60" value="-44.2" /><Key frame="66" value="2.8" /><Key frame="70" value="2.8" /><Key frame="80" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-27.1" /><Key frame="26" value="-29.6" /><Key frame="40" value="-27.1" /><Key frame="50" value="-27.1" /><Key frame="58" value="-64.5" /><Key frame="60" value="-64.5" /><Key frame="66" value="-1.6" /><Key frame="70" value="-1.6" /><Key frame="80" value="-27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0"><Key frame="10" value="103.5" /><Key frame="40" value="103.5" /><Key frame="50" value="103.5" /><Key frame="58" value="-5.2" /><Key frame="60" value="-5.2" /><Key frame="66" value="-31.3" /><Key frame="70" value="-31.3" /><Key frame="80" value="103.5" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="10" value="0" /><Key frame="18" value="1.7" /><Key frame="40" value="0" /><Key frame="50" value="0" /><Key frame="58" value="1.7" /><Key frame="80" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0"><Key frame="10" value="0" /><Key frame="18" value="10" /><Key frame="40" value="0" /><Key frame="50" value="0" /><Key frame="58" value="-10" /><Key frame="80" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="390" y="21"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="136" y="22"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("punch to the sky, one by one")]]></content></script><pluginContent><text><![CDATA[punch to the sky, one by one]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Link inputowner="27" indexofinput="2" outputowner="15" indexofoutput="4" /><Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="27" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="27" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ex8_punch_top" id="10" localization="8" tooltip="" x="904" y="894"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onDoExercise" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onDidExercise" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="air_boxing_TOP" id="26" localization="8" tooltip="" x="166" y="297"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="81" size="81"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe81" index="81"><Diagram><Box name="Goto And Play (number)" id="1" localization="8" tooltip="Jump to the frame number set in parameters and start playing the parent timeline." x="88" y="27"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onGo(self):
        self.gotoAndPlayParent(self.getParameter("Frame number"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /><Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="" actuator="HipRoll" mute="0" unit="0"><Key frame="10" value="0" /><Key frame="18" value="2.9" /><Key frame="20" value="2.9" /><Key frame="40" value="0" /><Key frame="50" value="0" /><Key frame="58" value="-2.7" /><Key frame="60" value="-2.7" /><Key frame="67" value="-2.7" /><Key frame="70" value="-2.7" /><Key frame="80" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="10" value="-88.5" /><Key frame="18" value="-87.6" /><Key frame="20" value="-87.6" /><Key frame="27" value="-0.5" /><Key frame="30" value="-0.5" /><Key frame="40" value="-88.5" /><Key frame="50" value="-88.5" /><Key frame="67" value="-87.5" /><Key frame="80" value="-88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="10" value="-3.3" /><Key frame="18" value="-25" /><Key frame="20" value="-25" /><Key frame="27" value="30.6" /><Key frame="30" value="30.6" /><Key frame="40" value="-3.3" /><Key frame="50" value="-3.3" /><Key frame="80" value="-3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="10" value="0.02" /><Key frame="18" value="0.02" /><Key frame="20" value="0.02" /><Key frame="40" value="0.02" /><Key frame="50" value="0.02" /><Key frame="80" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="10" value="4.1" /><Key frame="18" value="-44.2" /><Key frame="20" value="-44.2" /><Key frame="27" value="-76.4" /><Key frame="30" value="-76.4" /><Key frame="40" value="4.1" /><Key frame="50" value="4.1" /><Key frame="67" value="14.6" /><Key frame="80" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="10" value="27.1" /><Key frame="18" value="64.5" /><Key frame="20" value="64.5" /><Key frame="27" value="1.6" /><Key frame="30" value="1.6" /><Key frame="40" value="27.1" /><Key frame="50" value="27.1" /><Key frame="67" value="31.1" /><Key frame="80" value="27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="10" value="-103.5" /><Key frame="18" value="5.2" /><Key frame="20" value="5.2" /><Key frame="27" value="-31.3" /><Key frame="30" value="-31.3" /><Key frame="40" value="-103.5" /><Key frame="50" value="-103.5" /><Key frame="80" value="-103.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="88.5" /><Key frame="18" value="87.4" /><Key frame="20" value="87.4" /><Key frame="40" value="88.5" /><Key frame="50" value="88.5" /><Key frame="58" value="87.6" /><Key frame="60" value="87.6" /><Key frame="67" value="0.5" /><Key frame="70" value="0.5" /><Key frame="80" value="88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0"><Key frame="10" value="3.3" /><Key frame="18" value="3.3" /><Key frame="20" value="3.3" /><Key frame="40" value="3.3" /><Key frame="50" value="3.3" /><Key frame="58" value="25.3" /><Key frame="60" value="25.3" /><Key frame="67" value="30.6" /><Key frame="70" value="30.6" /><Key frame="80" value="3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="10" value="0.02" /><Key frame="18" value="0.02" /><Key frame="20" value="0.02" /><Key frame="40" value="0.02" /><Key frame="50" value="0.02" /><Key frame="80" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="4.1" /><Key frame="18" value="4.1" /><Key frame="20" value="4.1" /><Key frame="27" value="16.6" /><Key frame="40" value="4.1" /><Key frame="50" value="4.1" /><Key frame="58" value="-44.2" /><Key frame="60" value="-44.2" /><Key frame="67" value="-76.1" /><Key frame="70" value="-76.1" /><Key frame="80" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-27.1" /><Key frame="18" value="-27.1" /><Key frame="20" value="-27.1" /><Key frame="27" value="-29.6" /><Key frame="40" value="-27.1" /><Key frame="50" value="-27.1" /><Key frame="58" value="-64.5" /><Key frame="60" value="-64.5" /><Key frame="67" value="-1.6" /><Key frame="70" value="-1.6" /><Key frame="80" value="-27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0"><Key frame="10" value="103.5" /><Key frame="18" value="103.5" /><Key frame="20" value="103.5" /><Key frame="40" value="103.5" /><Key frame="50" value="103.5" /><Key frame="58" value="-5.2" /><Key frame="60" value="-5.2" /><Key frame="67" value="-31.3" /><Key frame="70" value="-31.3" /><Key frame="80" value="103.5" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="10" value="-7" /><Key frame="18" value="-8" /><Key frame="30" value="-19.7" /><Key frame="40" value="-7" /><Key frame="50" value="-7" /><Key frame="58" value="-7.98879" /><Key frame="70" value="-19.7245" /><Key frame="80" value="-7" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0"><Key frame="10" value="0" /><Key frame="18" value="9.5" /><Key frame="40" value="0" /><Key frame="50" value="0" /><Key frame="58" value="-9.50791" /><Key frame="80" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="go_airboxing" id="27" localization="8" tooltip="" x="159" y="126"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40"><ActuatorList model=""><ActuatorCurve name="" actuator="HipRoll" mute="0" unit="0"><Key frame="40" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="40" value="-88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="40" value="-3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="40" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="40" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="40" value="27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="40" value="-103.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0"><Key frame="40" value="88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0"><Key frame="40" value="3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="40" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="40" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="40" value="-27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0"><Key frame="40" value="103.5" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="397" y="21"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="143" y="22"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("punch to the front, one by one")]]></content></script><pluginContent><text><![CDATA[punch to the front, one by one]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Link inputowner="26" indexofinput="2" outputowner="27" indexofoutput="4" /><Link inputowner="27" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="26" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="26" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ex9_punch_all1" id="11" localization="8" tooltip="" x="909" y="1094"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onDoExercise" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onDidExercise" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="go_airboxing" id="30" localization="8" tooltip="" x="144" y="139"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40"><ActuatorList model=""><ActuatorCurve name="" actuator="HipRoll" mute="0" unit="0"><Key frame="40" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="40" value="-88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="40" value="-3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="40" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="40" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="40" value="27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="40" value="-103.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0"><Key frame="40" value="88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0"><Key frame="40" value="3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="40" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="40" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="40" value="-27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0"><Key frame="40" value="103.5" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="air_boxing_ALL" id="31" localization="8" tooltip="" x="141" y="303"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="161" size="161"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe161" index="161"><Diagram><Box name="Goto And Play (number)" id="1" localization="8" tooltip="Jump to the frame number set in parameters and start playing the parent timeline." x="88" y="27"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onGo(self):
        self.gotoAndPlayParent(self.getParameter("Frame number"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /><Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="" actuator="HipRoll" mute="0" unit="0"><Key frame="10" value="0" /><Key frame="18" value="2.9" /><Key frame="20" value="2.9" /><Key frame="40" value="0" /><Key frame="50" value="0" /><Key frame="58" value="-2.7" /><Key frame="60" value="-2.7" /><Key frame="67" value="-2.7" /><Key frame="70" value="-2.7" /><Key frame="80" value="0" /><Key frame="90" value="0" /><Key frame="98" value="2.7" /><Key frame="100" value="2.7" /><Key frame="106" value="2.7" /><Key frame="110" value="2.7" /><Key frame="120" value="0" /><Key frame="130" value="0" /><Key frame="138" value="-2.7" /><Key frame="140" value="-2.7" /><Key frame="146" value="-2.7" /><Key frame="150" value="-2.7" /><Key frame="160" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="10" value="-88.5" /><Key frame="18" value="-87.6" /><Key frame="20" value="-87.6" /><Key frame="27" value="-0.5" /><Key frame="30" value="-0.5" /><Key frame="40" value="-88.5" /><Key frame="50" value="-88.5" /><Key frame="67" value="-87.5" /><Key frame="80" value="-88.5" /><Key frame="90" value="-88.5" /><Key frame="98" value="-88.5" /><Key frame="100" value="-88.5" /><Key frame="106" value="-0.5" /><Key frame="110" value="-0.5" /><Key frame="120" value="-88.5" /><Key frame="130" value="-88.5" /><Key frame="146" value="-88.5" /><Key frame="160" value="-88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="10" value="-3.3" /><Key frame="18" value="-25" /><Key frame="20" value="-25" /><Key frame="27" value="30.6" /><Key frame="30" value="30.6" /><Key frame="40" value="-3.3" /><Key frame="50" value="-3.3" /><Key frame="80" value="-3.3" /><Key frame="90" value="-3.3" /><Key frame="98" value="33.5" /><Key frame="100" value="33.5" /><Key frame="106" value="-30.6" /><Key frame="110" value="-30.6" /><Key frame="120" value="-3.3" /><Key frame="130" value="-3.3" /><Key frame="160" value="-3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="10" value="0.02" /><Key frame="18" value="0.02" /><Key frame="20" value="0.02" /><Key frame="40" value="0.02" /><Key frame="50" value="0.02" /><Key frame="80" value="0.02" /><Key frame="90" value="0.02" /><Key frame="120" value="0.02" /><Key frame="130" value="0.02" /><Key frame="160" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="10" value="4.1" /><Key frame="18" value="-44.2" /><Key frame="20" value="-44.2" /><Key frame="27" value="-76.4" /><Key frame="30" value="-76.4" /><Key frame="40" value="4.1" /><Key frame="50" value="4.1" /><Key frame="67" value="14.6" /><Key frame="80" value="4.1" /><Key frame="90" value="4.1" /><Key frame="98" value="-44.2" /><Key frame="100" value="-44.2" /><Key frame="106" value="2.8" /><Key frame="110" value="2.8" /><Key frame="120" value="4.1" /><Key frame="130" value="4.1" /><Key frame="146" value="11.6" /><Key frame="160" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="10" value="27.1" /><Key frame="18" value="64.5" /><Key frame="20" value="64.5" /><Key frame="27" value="1.6" /><Key frame="30" value="1.6" /><Key frame="40" value="27.1" /><Key frame="50" value="27.1" /><Key frame="67" value="31.1" /><Key frame="80" value="27.1" /><Key frame="90" value="27.1" /><Key frame="98" value="64.5" /><Key frame="100" value="64.5" /><Key frame="106" value="1.6" /><Key frame="110" value="1.6" /><Key frame="120" value="27.1" /><Key frame="130" value="27.1" /><Key frame="146" value="29.6" /><Key frame="160" value="27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="10" value="-103.5" /><Key frame="18" value="5.2" /><Key frame="20" value="5.2" /><Key frame="27" value="-31.3" /><Key frame="30" value="-31.3" /><Key frame="40" value="-103.5" /><Key frame="50" value="-103.5" /><Key frame="80" value="-103.5" /><Key frame="90" value="-103.5" /><Key frame="98" value="5.2" /><Key frame="100" value="5.2" /><Key frame="106" value="31.3" /><Key frame="110" value="31.3" /><Key frame="120" value="-103.5" /><Key frame="130" value="-103.5" /><Key frame="160" value="-103.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="88.5" /><Key frame="18" value="87.4" /><Key frame="20" value="87.4" /><Key frame="40" value="88.5" /><Key frame="50" value="88.5" /><Key frame="58" value="87.6" /><Key frame="60" value="87.6" /><Key frame="67" value="0.5" /><Key frame="70" value="0.5" /><Key frame="80" value="88.5" /><Key frame="90" value="88.5" /><Key frame="106" value="88.5" /><Key frame="120" value="88.5" /><Key frame="130" value="88.5" /><Key frame="138" value="88.5" /><Key frame="140" value="88.5" /><Key frame="146" value="0.5" /><Key frame="150" value="0.5" /><Key frame="160" value="88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0"><Key frame="10" value="3.3" /><Key frame="18" value="3.3" /><Key frame="20" value="3.3" /><Key frame="40" value="3.3" /><Key frame="50" value="3.3" /><Key frame="58" value="25.3" /><Key frame="60" value="25.3" /><Key frame="67" value="30.6" /><Key frame="70" value="30.6" /><Key frame="80" value="3.3" /><Key frame="90" value="3.3" /><Key frame="120" value="3.3" /><Key frame="130" value="3.3" /><Key frame="138" value="-33.5" /><Key frame="140" value="-33.5" /><Key frame="146" value="30.6" /><Key frame="150" value="30.6" /><Key frame="160" value="3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="10" value="0.02" /><Key frame="18" value="0.02" /><Key frame="20" value="0.02" /><Key frame="40" value="0.02" /><Key frame="50" value="0.02" /><Key frame="80" value="0.02" /><Key frame="90" value="0.02" /><Key frame="120" value="0.02" /><Key frame="130" value="0.02" /><Key frame="160" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="4.1" /><Key frame="18" value="4.1" /><Key frame="20" value="4.1" /><Key frame="27" value="16.6" /><Key frame="40" value="4.1" /><Key frame="50" value="4.1" /><Key frame="58" value="-44.2" /><Key frame="60" value="-44.2" /><Key frame="67" value="-76.1" /><Key frame="70" value="-76.1" /><Key frame="80" value="4.1" /><Key frame="90" value="4.1" /><Key frame="106" value="11.6" /><Key frame="120" value="4.1" /><Key frame="130" value="4.1" /><Key frame="138" value="-44.2" /><Key frame="140" value="-44.2" /><Key frame="146" value="2.8" /><Key frame="150" value="2.8" /><Key frame="160" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-27.1" /><Key frame="18" value="-27.1" /><Key frame="20" value="-27.1" /><Key frame="27" value="-29.6" /><Key frame="40" value="-27.1" /><Key frame="50" value="-27.1" /><Key frame="58" value="-64.5" /><Key frame="60" value="-64.5" /><Key frame="67" value="-1.6" /><Key frame="70" value="-1.6" /><Key frame="80" value="-27.1" /><Key frame="90" value="-27.1" /><Key frame="106" value="-29.6" /><Key frame="120" value="-27.1" /><Key frame="130" value="-27.1" /><Key frame="138" value="-64.5" /><Key frame="140" value="-64.5" /><Key frame="146" value="-1.6" /><Key frame="150" value="-1.6" /><Key frame="160" value="-27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0"><Key frame="10" value="103.5" /><Key frame="18" value="103.5" /><Key frame="20" value="103.5" /><Key frame="40" value="103.5" /><Key frame="50" value="103.5" /><Key frame="58" value="-5.2" /><Key frame="60" value="-5.2" /><Key frame="67" value="-31.3" /><Key frame="70" value="-31.3" /><Key frame="80" value="103.5" /><Key frame="90" value="103.5" /><Key frame="120" value="103.5" /><Key frame="130" value="103.5" /><Key frame="138" value="-5.2" /><Key frame="140" value="-5.2" /><Key frame="146" value="-31.3" /><Key frame="150" value="-31.3" /><Key frame="160" value="103.5" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="10" value="-7" /><Key frame="18" value="-8" /><Key frame="30" value="-19.7" /><Key frame="40" value="-7" /><Key frame="50" value="-7" /><Key frame="58" value="-7.98879" /><Key frame="70" value="-19.7245" /><Key frame="80" value="-7" /><Key frame="90" value="0" /><Key frame="98" value="1.7" /><Key frame="120" value="0" /><Key frame="130" value="0" /><Key frame="138" value="1.7" /><Key frame="160" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0"><Key frame="10" value="0" /><Key frame="18" value="9.5" /><Key frame="40" value="0" /><Key frame="50" value="0" /><Key frame="58" value="-9.50791" /><Key frame="80" value="0" /><Key frame="90" value="0" /><Key frame="98" value="10" /><Key frame="120" value="0" /><Key frame="130" value="0" /><Key frame="138" value="-10" /><Key frame="160" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="391" y="27"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="137" y="28"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("punch to the front and to the sky, front left, front right, top right, top left. and repeat!")]]></content></script><pluginContent><text><![CDATA[punch to the front and to the sky, front left, front right, top right, top left. and repeat!]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Link inputowner="31" indexofinput="2" outputowner="30" indexofoutput="4" /><Link inputowner="30" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="31" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="31" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ex9_punch_all2" id="12" localization="8" tooltip="" x="910" y="1194"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onDoExercise" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onDidExercise" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="go_airboxing" id="32" localization="8" tooltip="" x="132" y="132"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40"><ActuatorList model=""><ActuatorCurve name="" actuator="HipRoll" mute="0" unit="0"><Key frame="40" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="40" value="-88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="40" value="-3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="40" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="40" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="40" value="27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="40" value="-103.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0"><Key frame="40" value="88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0"><Key frame="40" value="3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="40" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="40" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="40" value="-27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0"><Key frame="40" value="103.5" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="air_boxing_ALL" id="33" localization="8" tooltip="" x="134" y="295"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="161" size="161"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe161" index="161"><Diagram><Box name="Goto And Play (number)" id="1" localization="8" tooltip="Jump to the frame number set in parameters and start playing the parent timeline." x="88" y="27"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onGo(self):
        self.gotoAndPlayParent(self.getParameter("Frame number"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /><Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="" actuator="HipRoll" mute="0" unit="0"><Key frame="10" value="0" /><Key frame="18" value="2.9" /><Key frame="20" value="2.9" /><Key frame="40" value="0" /><Key frame="50" value="0" /><Key frame="58" value="-2.7" /><Key frame="60" value="-2.7" /><Key frame="67" value="-2.7" /><Key frame="70" value="-2.7" /><Key frame="80" value="0" /><Key frame="90" value="0" /><Key frame="98" value="-2.7" /><Key frame="100" value="-2.7" /><Key frame="107" value="-2.7" /><Key frame="110" value="-2.7" /><Key frame="120" value="0" /><Key frame="130" value="0" /><Key frame="138" value="2.7" /><Key frame="140" value="2.7" /><Key frame="147" value="2.7" /><Key frame="150" value="2.7" /><Key frame="160" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0"><Key frame="10" value="-88.5" /><Key frame="18" value="-87.6" /><Key frame="20" value="-87.6" /><Key frame="27" value="-0.5" /><Key frame="30" value="-0.5" /><Key frame="40" value="-88.5" /><Key frame="50" value="-88.5" /><Key frame="67" value="-88.5" /><Key frame="80" value="-88.5" /><Key frame="90" value="-88.5" /><Key frame="107" value="-87.5" /><Key frame="120" value="-88.5" /><Key frame="130" value="-88.5" /><Key frame="138" value="-88.5" /><Key frame="140" value="-88.5" /><Key frame="147" value="-0.5" /><Key frame="150" value="-0.5" /><Key frame="160" value="-88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0"><Key frame="10" value="-3.3" /><Key frame="18" value="-25" /><Key frame="20" value="-25" /><Key frame="27" value="30.6" /><Key frame="30" value="30.6" /><Key frame="40" value="-3.3" /><Key frame="50" value="-3.3" /><Key frame="80" value="-3.3" /><Key frame="90" value="-3.3" /><Key frame="120" value="-3.3" /><Key frame="130" value="-3.3" /><Key frame="138" value="33.5" /><Key frame="140" value="33.5" /><Key frame="147" value="-30.6" /><Key frame="150" value="-30.6" /><Key frame="160" value="-3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="LHand" mute="0" unit="1"><Key frame="10" value="0.02" /><Key frame="18" value="0.02" /><Key frame="20" value="0.02" /><Key frame="40" value="0.02" /><Key frame="50" value="0.02" /><Key frame="80" value="0.02" /><Key frame="90" value="0.02" /><Key frame="120" value="0.02" /><Key frame="130" value="0.02" /><Key frame="160" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="10" value="4.1" /><Key frame="18" value="-44.2" /><Key frame="20" value="-44.2" /><Key frame="27" value="-76.4" /><Key frame="30" value="-76.4" /><Key frame="40" value="4.1" /><Key frame="50" value="4.1" /><Key frame="67" value="11.6" /><Key frame="80" value="4.1" /><Key frame="90" value="4.1" /><Key frame="107" value="14.6" /><Key frame="120" value="4.1" /><Key frame="130" value="4.1" /><Key frame="138" value="-44.2" /><Key frame="140" value="-44.2" /><Key frame="147" value="2.8" /><Key frame="150" value="2.8" /><Key frame="160" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="10" value="27.1" /><Key frame="18" value="64.5" /><Key frame="20" value="64.5" /><Key frame="27" value="1.6" /><Key frame="30" value="1.6" /><Key frame="40" value="27.1" /><Key frame="50" value="27.1" /><Key frame="67" value="29.6" /><Key frame="80" value="27.1" /><Key frame="90" value="27.1" /><Key frame="107" value="31.1" /><Key frame="120" value="27.1" /><Key frame="130" value="27.1" /><Key frame="138" value="64.5" /><Key frame="140" value="64.5" /><Key frame="147" value="1.6" /><Key frame="150" value="1.6" /><Key frame="160" value="27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0"><Key frame="10" value="-103.5" /><Key frame="18" value="5.2" /><Key frame="20" value="5.2" /><Key frame="27" value="-31.3" /><Key frame="30" value="-31.3" /><Key frame="40" value="-103.5" /><Key frame="50" value="-103.5" /><Key frame="80" value="-103.5" /><Key frame="90" value="-103.5" /><Key frame="120" value="-103.5" /><Key frame="130" value="-103.5" /><Key frame="138" value="5.2" /><Key frame="140" value="5.2" /><Key frame="147" value="31.3" /><Key frame="150" value="31.3" /><Key frame="160" value="-103.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="88.5" /><Key frame="18" value="87.4" /><Key frame="20" value="87.4" /><Key frame="40" value="88.5" /><Key frame="50" value="88.5" /><Key frame="58" value="88.5" /><Key frame="60" value="88.5" /><Key frame="67" value="0.5" /><Key frame="70" value="0.5" /><Key frame="80" value="88.5" /><Key frame="90" value="88.5" /><Key frame="98" value="87.6" /><Key frame="100" value="87.6" /><Key frame="107" value="0.5" /><Key frame="110" value="0.5" /><Key frame="120" value="88.5" /><Key frame="130" value="88.5" /><Key frame="147" value="88.5" /><Key frame="160" value="88.5" /></ActuatorCurve><ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0"><Key frame="10" value="3.3" /><Key frame="18" value="3.3" /><Key frame="20" value="3.3" /><Key frame="40" value="3.3" /><Key frame="50" value="3.3" /><Key frame="58" value="-33.5" /><Key frame="60" value="-33.5" /><Key frame="67" value="30.6" /><Key frame="70" value="30.6" /><Key frame="80" value="3.3" /><Key frame="90" value="3.3" /><Key frame="98" value="25.3" /><Key frame="100" value="25.3" /><Key frame="107" value="30.6" /><Key frame="110" value="30.6" /><Key frame="120" value="3.3" /><Key frame="130" value="3.3" /><Key frame="160" value="3.3" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="10" value="0.02" /><Key frame="18" value="0.02" /><Key frame="20" value="0.02" /><Key frame="40" value="0.02" /><Key frame="50" value="0.02" /><Key frame="80" value="0.02" /><Key frame="90" value="0.02" /><Key frame="120" value="0.02" /><Key frame="130" value="0.02" /><Key frame="160" value="0.02" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="4.1" /><Key frame="18" value="4.1" /><Key frame="20" value="4.1" /><Key frame="27" value="16.6" /><Key frame="40" value="4.1" /><Key frame="50" value="4.1" /><Key frame="58" value="-44.2" /><Key frame="60" value="-44.2" /><Key frame="67" value="2.8" /><Key frame="70" value="2.8" /><Key frame="80" value="4.1" /><Key frame="90" value="4.1" /><Key frame="98" value="-44.2" /><Key frame="100" value="-44.2" /><Key frame="107" value="-76.1" /><Key frame="110" value="-76.1" /><Key frame="120" value="4.1" /><Key frame="130" value="4.1" /><Key frame="147" value="11.6" /><Key frame="160" value="4.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-27.1" /><Key frame="18" value="-27.1" /><Key frame="20" value="-27.1" /><Key frame="27" value="-29.6" /><Key frame="40" value="-27.1" /><Key frame="50" value="-27.1" /><Key frame="58" value="-64.5" /><Key frame="60" value="-64.5" /><Key frame="67" value="-1.6" /><Key frame="70" value="-1.6" /><Key frame="80" value="-27.1" /><Key frame="90" value="-27.1" /><Key frame="98" value="-64.5" /><Key frame="100" value="-64.5" /><Key frame="107" value="-1.6" /><Key frame="110" value="-1.6" /><Key frame="120" value="-27.1" /><Key frame="130" value="-27.1" /><Key frame="147" value="-29.6" /><Key frame="160" value="-27.1" /></ActuatorCurve><ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0"><Key frame="10" value="103.5" /><Key frame="18" value="103.5" /><Key frame="20" value="103.5" /><Key frame="40" value="103.5" /><Key frame="50" value="103.5" /><Key frame="58" value="-5.2" /><Key frame="60" value="-5.2" /><Key frame="67" value="-31.3" /><Key frame="70" value="-31.3" /><Key frame="80" value="103.5" /><Key frame="90" value="103.5" /><Key frame="98" value="-5.2" /><Key frame="100" value="-5.2" /><Key frame="107" value="-31.3" /><Key frame="110" value="-31.3" /><Key frame="120" value="103.5" /><Key frame="130" value="103.5" /><Key frame="160" value="103.5" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="10" value="-7" /><Key frame="18" value="-8" /><Key frame="30" value="-19.7" /><Key frame="40" value="-7" /><Key frame="50" value="0" /><Key frame="58" value="1.7" /><Key frame="80" value="0" /><Key frame="90" value="-7" /><Key frame="98" value="-7.98879" /><Key frame="110" value="-19.7245" /><Key frame="120" value="-7" /><Key frame="130" value="0" /><Key frame="138" value="1.7" /><Key frame="160" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0"><Key frame="10" value="0" /><Key frame="18" value="9.5" /><Key frame="40" value="0" /><Key frame="50" value="0" /><Key frame="58" value="-10" /><Key frame="80" value="0" /><Key frame="90" value="0" /><Key frame="98" value="-9.50791" /><Key frame="120" value="0" /><Key frame="130" value="0" /><Key frame="138" value="10" /><Key frame="160" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="378" y="16"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="124" y="17"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("punch to the front and to the sky, front left, front right, top right, top left. and repeat!")]]></content></script><pluginContent><text><![CDATA[punch to the front and to the sky, front left, front right, top right, top left. and repeat!]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Link inputowner="33" indexofinput="2" outputowner="32" indexofoutput="4" /><Link inputowner="32" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="33" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="33" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Random Int." id="14" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="417" y="181"><bitmap>media/images/box/box-script.png</bitmap><script language="4"><content><![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" /><Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" /><Parameter name="Min value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" /><Parameter name="Max value" inherits_from_parent="0" content_type="1" value="3" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" /><Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" /></Box><Box name="Exercise Level" id="15" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="83" y="52"><bitmap>media/images/box/interaction/choice.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		elif(p == self.typeConversion(3)):
			self.output_4(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]></content></script><pluginContent><keywords><keyword>0</keyword><keyword>1</keyword><keyword>2</keyword><keyword>3</keyword><keyword></keyword></keywords></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" /><Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" /><Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" /><Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" /><Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" /><Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" /></Box><Box name="Exercise Level (1)" id="16" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="546" y="181"><bitmap>media/images/box/interaction/choice.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(1)):
			self.output_1(p)
		elif(p == self.typeConversion(2)):
			self.output_2(p)
		elif(p == self.typeConversion(3)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]></content></script><pluginContent><keywords><keyword>1</keyword><keyword>2</keyword><keyword>3</keyword><keyword></keyword></keywords></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" /><Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" /><Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" /><Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" /><Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" /></Box><Box name="Random Int. (1)" id="13" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="436" y="583"><bitmap>media/images/box/box-script.png</bitmap><script language="4"><content><![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" /><Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" /><Parameter name="Min value" inherits_from_parent="0" content_type="1" value="4" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" /><Parameter name="Max value" inherits_from_parent="0" content_type="1" value="6" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" /><Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" /></Box><Box name="Exercise Level (2)" id="17" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="565" y="583"><bitmap>media/images/box/interaction/choice.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(4)):
			self.output_1(p)
		elif(p == self.typeConversion(5)):
			self.output_2(p)
		elif(p == self.typeConversion(6)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]></content></script><pluginContent><keywords><keyword>4</keyword><keyword>5</keyword><keyword>6</keyword><keyword></keyword></keywords></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" /><Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" /><Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" /><Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" /><Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" /></Box><Box name="Random Int. (2)" id="18" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="444" y="1020"><bitmap>media/images/box/box-script.png</bitmap><script language="4"><content><![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" /><Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" /><Parameter name="Min value" inherits_from_parent="0" content_type="1" value="7" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" /><Parameter name="Max value" inherits_from_parent="0" content_type="1" value="10" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" /><Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" /></Box><Box name="Exercise Level (3)" id="19" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="573" y="1020"><bitmap>media/images/box/interaction/choice.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(7)):
			self.output_1(p)
		elif(p == self.typeConversion(8)):
			self.output_2(p)
		elif(p == self.typeConversion(9)):
			self.output_3(p)
		elif(p == self.typeConversion(10)):
			self.output_4(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]></content></script><pluginContent><keywords><keyword>7</keyword><keyword>8</keyword><keyword>9</keyword><keyword>10</keyword><keyword></keyword></keywords></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" /><Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" /><Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" /><Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" /><Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" /><Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" /></Box><Box name="Exercise Duration (1)" id="20" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="656" y="704"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="30" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="Exercise Duration (2)" id="21" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="663" y="1161"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="30" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Link inputowner="1" indexofinput="4" outputowner="1" indexofoutput="6" /><Link inputowner="2" indexofinput="4" outputowner="2" indexofoutput="6" /><Link inputowner="3" indexofinput="4" outputowner="3" indexofoutput="6" /><Link inputowner="4" indexofinput="4" outputowner="4" indexofoutput="6" /><Link inputowner="5" indexofinput="4" outputowner="5" indexofoutput="6" /><Link inputowner="7" indexofinput="4" outputowner="7" indexofoutput="6" /><Link inputowner="8" indexofinput="4" outputowner="8" indexofoutput="6" /><Link inputowner="9" indexofinput="4" outputowner="9" indexofoutput="6" /><Link inputowner="10" indexofinput="4" outputowner="10" indexofoutput="6" /><Link inputowner="11" indexofinput="4" outputowner="11" indexofoutput="6" /><Link inputowner="12" indexofinput="4" outputowner="12" indexofoutput="6" /><Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="16" indexofinput="2" outputowner="14" indexofoutput="3" /><Link inputowner="1" indexofinput="2" outputowner="16" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="16" indexofoutput="5" /><Link inputowner="4" indexofinput="2" outputowner="16" indexofoutput="6" /><Link inputowner="17" indexofinput="2" outputowner="13" indexofoutput="3" /><Link inputowner="5" indexofinput="2" outputowner="17" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="17" indexofoutput="5" /><Link inputowner="8" indexofinput="2" outputowner="17" indexofoutput="6" /><Link inputowner="19" indexofinput="2" outputowner="18" indexofoutput="3" /><Link inputowner="10" indexofinput="2" outputowner="19" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="19" indexofoutput="5" /><Link inputowner="11" indexofinput="2" outputowner="19" indexofoutput="6" /><Link inputowner="12" indexofinput="2" outputowner="19" indexofoutput="7" /><Link inputowner="29" indexofinput="2" outputowner="1" indexofoutput="5" /><Link inputowner="29" indexofinput="2" outputowner="3" indexofoutput="5" /><Link inputowner="29" indexofinput="2" outputowner="4" indexofoutput="5" /><Link inputowner="29" indexofinput="2" outputowner="5" indexofoutput="5" /><Link inputowner="29" indexofinput="2" outputowner="7" indexofoutput="5" /><Link inputowner="29" indexofinput="2" outputowner="8" indexofoutput="5" /><Link inputowner="29" indexofinput="2" outputowner="10" indexofoutput="5" /><Link inputowner="29" indexofinput="2" outputowner="9" indexofoutput="5" /><Link inputowner="29" indexofinput="2" outputowner="11" indexofoutput="5" /><Link inputowner="29" indexofinput="2" outputowner="12" indexofoutput="5" /><Link inputowner="0" indexofinput="4" outputowner="29" indexofoutput="4" /><Link inputowner="1" indexofinput="3" outputowner="6" indexofoutput="4" /><Link inputowner="3" indexofinput="3" outputowner="6" indexofoutput="4" /><Link inputowner="4" indexofinput="3" outputowner="6" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="14" indexofoutput="3" /><Link inputowner="20" indexofinput="2" outputowner="13" indexofoutput="3" /><Link inputowner="5" indexofinput="3" outputowner="20" indexofoutput="4" /><Link inputowner="7" indexofinput="3" outputowner="20" indexofoutput="4" /><Link inputowner="8" indexofinput="3" outputowner="20" indexofoutput="4" /><Link inputowner="21" indexofinput="2" outputowner="18" indexofoutput="3" /><Link inputowner="10" indexofinput="3" outputowner="21" indexofoutput="4" /><Link inputowner="9" indexofinput="3" outputowner="21" indexofoutput="4" /><Link inputowner="11" indexofinput="3" outputowner="21" indexofoutput="4" /><Link inputowner="12" indexofinput="3" outputowner="21" indexofoutput="4" /><Link inputowner="18" indexofinput="2" outputowner="15" indexofoutput="7" /><Link inputowner="13" indexofinput="2" outputowner="15" indexofoutput="6" /><Link inputowner="14" indexofinput="2" outputowner="15" indexofoutput="5" /><Link inputowner="1" indexofinput="2" outputowner="15" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="15" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Counter" id="5" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="374" y="139"><bitmap>media/images/box/loop.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" /><Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" /><Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" /><Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" /><Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" /><Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" /><Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" /></Box><Box name="If" id="6" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="375" y="254"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" /><Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" /><Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" /><Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="&lt;" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5"><Choice value="&lt;" /><Choice value="&lt; or =" /><Choice value="=" /><Choice value="&gt; or =" /><Choice value="&gt;" /><Choice value="≠" /></Parameter><Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="5" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" /></Box><Box name="Wait For Signals" id="8" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="583" y="100"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="Playlist 1" id="3" localization="8" tooltip="" x="231" y="139"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote
        self.playlist = ["/../songs/blindinglights.wav", "/../songs/feel_it_still.wav"]

    def onLoad(self):
        self.bIsRunning = False
        pass

    def onUnload(self):
        self.stopPlayer()
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        for song in self.playlist:
            song_path = self.behaviorAbsolutePath() + song
            try:
                id = self.player.playFile(song_path, 0.6, 0.0)
            except:
                pass

        self.stopPlayer()
        self.onStopped() # activate output of the box
        self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopPlayer(self):
        self.playerStop.stopAll()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="If is 0" id="1" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="84" y="177"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" /><Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" /><Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" /><Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="=" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5"><Choice value="&lt;" /><Choice value="&lt; or =" /><Choice value="=" /><Choice value="&gt; or =" /><Choice value="&gt;" /><Choice value="≠" /></Parameter><Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" /></Box><Box name="Playlist 2" id="4" localization="8" tooltip="" x="214" y="267"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote
        self.playlist = ["/../songs/blindinglights.wav", "/../songs/feel_it_still.wav"]

    def onLoad(self):
        self.bIsRunning = False
        pass

    def onUnload(self):
        self.stopPlayer()
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        for song in self.playlist:
            song_path = self.behaviorAbsolutePath() + song
            try:
                id = self.player.playFile(song_path, 0.6, 0.0)
            except:
                pass

        self.stopPlayer()
        self.onStopped() # activate output of the box
        self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopPlayer(self):
        self.playerStop.stopAll()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="5" indexofinput="3" outputowner="6" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="8" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="4" /><Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="8" indexofinput="3" outputowner="6" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" /><Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="3" /><Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="3" /><Link inputowner="8" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="29" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="7" /><Link inputowner="9" indexofinput="4" outputowner="10" indexofoutput="4" /><Link inputowner="13" indexofinput="2" outputowner="12" indexofoutput="4" /><Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>